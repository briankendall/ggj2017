/*gameJamWavesOfDarkness.pde

Produced by: Richard (Rick) G. Freedman
             Brian Kendall
             Patrick (Pat) King
             Allison (Alley) ...

Game produced for GameJam 2017 at the University of 
Massachusetts Amherst site
*/

import java.util.HashMap;

//Use to toggle debug mode
final boolean DEBUG = true;

//Some variable constants
final int SCREEN_HEIGHT = 1200;
final int SCREEN_WIDTH = 1200;

//Special constant for no tile to draw
final int NO_TILE = -1;

//The current level being played
Level curLevel = null;

//The tileset association (tile ID -> filepath)
HashMap<Integer, String> tileset;

//The items that may appear
HashMap<Integer, Item> itemset;

//Initializes everything
/*Paremeters:
    -------
  Returns:
    (void)
*/
void setup()
{
  //Set the screen size, and note 2D
  size(1200, 1200, P2D);
  
  //Fill in the tileset
  tileset = new HashMap();
  tileset.put(0, "sprites/exit-temp.png");
  tileset.put(1, "sprites/instrument-moveable-temp.png");
  tileset.put(2, "sprites/instrument-static-temp.png");
  tileset.put(3, "sprites/light-down-moveable-temp.png");
  tileset.put(4, "sprites/light-down-static-temp.png");
  tileset.put(5, "sprites/light-left-moveable-temp.png");
  tileset.put(6, "sprites/light-left-static-temp.png");
  tileset.put(7, "sprites/light-right-moveable-temp.png");
  tileset.put(8, "sprites/light-right-static-temp.png");
  tileset.put(9, "sprites/light-up-moveable-temp.png");
  tileset.put(10, "sprites/light-up-static-temp.png");
  tileset.put(11, "sprites/player-start-temp.png");
  
  itemset = new HashMap();
  for(int i = 0; i < 12; i++)
  {
    itemset.put(i, new Item(tileset.get(i), true, true, 0));
  }
  
  if(DEBUG)
  {
    Level testLevel = new Level(fullFilepath(dataPath(""), "example.tmx"));
  }
  curLevel = new Level(fullFilepath(dataPath(""), "example.tmx"));
}

//The loop for screen rendering
/*Parameters:
    -------
  Returns:
    (void)
*/
void draw()
{
  //Clear the screen
  clear();
  //Set the background color (black)
  //background(0, 0, 0);
  background(255,255,255);
  
  //Render the current level
  PImage[][] levelImg = getSpriteLayout(curLevel.getItemMap());
  
  for(int row = 0; row < levelImg.length; row++)
  {
    for(int col = 0; col < levelImg[row].length; col++)
    {
      if(levelImg[row][col] != null)
      {
        if(DEBUG)
        {
          print("Drawing image at [" + row + ", " + col + "]\n");
        }
        image(levelImg[row][col], col * levelImg[row][col].width, row * levelImg[row][col].height);
      }
    }
  }
}

//Convenient function for getting a full filepath name
//  independent of Operating System
/*Parameters:
    (String) prefixPath = prefix for filepath
    (String) suffixPath = suffix for filepath
  Returns:
    (String) = full filepath joining prefix and suffix
*/
public String fullFilepath(String prefixPath, String suffixPath)
{
  File file1 = new File(prefixPath);
  File file2 = new File(file1, suffixPath);
  return file2.getPath();
}

//Obtain the sprite to display for each item in the level
/*Parameters:
    (Item[][]) itemMap = map of items to display
  Returns:
    (PImage[][]) = map of images to display, null if nothing 
*/
public PImage[][] getSpriteLayout(Item[][] itemMap)
{
  PImage[][] toRender = new PImage[itemMap.length][itemMap[0].length];
  
  for(int row = 0; row < itemMap.length; row++)
  {
    for(int col = 0; col < itemMap[row].length; col++)
    {
      toRender[row][col] = ((itemMap[row][col] == null) || (!itemMap[row][col].getVisible())) ? null:itemMap[row][col].getSprite();
    }
  }
  
  return toRender;
}